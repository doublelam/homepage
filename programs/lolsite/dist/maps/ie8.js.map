{"version":3,"sources":["iconfont-ie8fix.js","respond.js"],"names":["$","$style","append","setTimeout","remove","w","callMedia","applyMedia","respond","update","requestQueue","xmlHttp","xmlhttpmethod","XMLHttpRequest","e","ActiveXObject","ajax","url","callback","req","open","onreadystatechange","readyState","status","responseText","send","isUnsupportedMediaQuery","query","replace","regex","minmaxwh","match","other","queue","unsupportedmq","media","keyframes","comments","urls","findStyles","only","minw","maxw","mediaQueriesSupported","matchMedia","matches","lastCall","resizeDefer","eminpx","doc","document","docElem","documentElement","mediastyles","rules","appendedEls","parsedSheets","resizeThrottle","head","getElementsByTagName","base","links","getEmValue","ret","div","createElement","body","originalHTMLFontSize","style","fontSize","originalBodyFontSize","fakeUsed","cssText","background","appendChild","insertBefore","firstChild","offsetWidth","removeChild","parseFloat","fromResize","name","docElemProp","currWidth","compatMode","styleBlocks","lastLink","length","now","Date","getTime","clearTimeout","i","hasOwnProperty","thisstyle","min","max","minnull","maxnull","em","indexOf","hasquery","push","j","parentNode","k","ss","css","join","type","nextSibling","styleSheet","createTextNode","translate","styles","href","qs","ql","substring","lastIndexOf","repUrls","useMedia","fullq","thisq","eachq","eql","RegExp","$1","$2","split","makeRequests","thisRequest","shift","ripCSS","sheet","isCSS","rel","toLowerCase","rawCssText","test","location","host","protocol","addEventListener","attachEvent","this"],"mappings":"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","file":"ie8.js","sourcesContent":["/**\r\n * 解决IE8下Font Icon的Bug\r\n * https://github.com/twbs/bootstrap/issues/13863\r\n */\r\n\r\n$(function() {\r\n    'use strict';\r\n    var $style;\r\n    $style = $('<style type=\"text/css\">:before,:after{content:none !important}</style>');\r\n    $('head').append($style);\r\n    return setTimeout(function() {\r\n        return $style.remove();\r\n    }, 0);\r\n});\r\n","/* Respond.js: min/max-width media query polyfill. (c) Scott Jehl. MIT Lic. j.mp/respondjs  */\r\n(function( w ){\r\n\r\n    \"use strict\";\r\n\r\n    //exposed namespace\r\n    var respond = {};\r\n    w.respond = respond;\r\n\r\n    //define update even in native-mq-supporting browsers, to avoid errors\r\n    respond.update = function(){};\r\n\r\n    //define ajax obj\r\n    var requestQueue = [],\r\n        xmlHttp = (function() {\r\n            var xmlhttpmethod = false;\r\n            try {\r\n                xmlhttpmethod = new w.XMLHttpRequest();\r\n            }\r\n            catch( e ){\r\n                xmlhttpmethod = new w.ActiveXObject( \"Microsoft.XMLHTTP\" );\r\n            }\r\n            return function(){\r\n                return xmlhttpmethod;\r\n            };\r\n        })(),\r\n\r\n    //tweaked Ajax functions from Quirksmode\r\n        ajax = function( url, callback ) {\r\n            var req = xmlHttp();\r\n            if (!req){\r\n                return;\r\n            }\r\n            req.open( \"GET\", url, true );\r\n            req.onreadystatechange = function () {\r\n                if ( req.readyState !== 4 || req.status !== 200 && req.status !== 304 ){\r\n                    return;\r\n                }\r\n                callback( req.responseText );\r\n            };\r\n            if ( req.readyState === 4 ){\r\n                return;\r\n            }\r\n            req.send( null );\r\n        },\r\n        isUnsupportedMediaQuery = function( query ) {\r\n            return query.replace( respond.regex.minmaxwh, '' ).match( respond.regex.other );\r\n        };\r\n\r\n    //expose for testing\r\n    respond.ajax = ajax;\r\n    respond.queue = requestQueue;\r\n    respond.unsupportedmq = isUnsupportedMediaQuery;\r\n    respond.regex = {\r\n        media: /@media[^\\{]+\\{([^\\{\\}]*\\{[^\\}\\{]*\\})+/gi,\r\n        keyframes: /@(?:\\-(?:o|moz|webkit)\\-)?keyframes[^\\{]+\\{(?:[^\\{\\}]*\\{[^\\}\\{]*\\})+[^\\}]*\\}/gi,\r\n        comments: /\\/\\*[^*]*\\*+([^/][^*]*\\*+)*\\//gi,\r\n        urls: /(url\\()['\"]?([^\\/\\)'\"][^:\\)'\"]+)['\"]?(\\))/g,\r\n        findStyles: /@media *([^\\{]+)\\{([\\S\\s]+?)$/,\r\n        only: /(only\\s+)?([a-zA-Z]+)\\s?/,\r\n        minw: /\\(\\s*min\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n        maxw: /\\(\\s*max\\-width\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/,\r\n        minmaxwh: /\\(\\s*m(in|ax)\\-(height|width)\\s*:\\s*(\\s*[0-9\\.]+)(px|em)\\s*\\)/gi,\r\n        other: /\\([^\\)]*\\)/g\r\n    };\r\n\r\n    //expose media query support flag for external use\r\n    respond.mediaQueriesSupported = w.matchMedia && w.matchMedia( \"only all\" ) !== null && w.matchMedia( \"only all\" ).matches;\r\n\r\n    //if media queries are supported, exit here\r\n    if( respond.mediaQueriesSupported ){\r\n        return;\r\n    }\r\n\r\n    //define vars\r\n    var doc = w.document,\r\n        docElem = doc.documentElement,\r\n        mediastyles = [],\r\n        rules = [],\r\n        appendedEls = [],\r\n        parsedSheets = {},\r\n        resizeThrottle = 30,\r\n        head = doc.getElementsByTagName( \"head\" )[0] || docElem,\r\n        base = doc.getElementsByTagName( \"base\" )[0],\r\n        links = head.getElementsByTagName( \"link\" ),\r\n\r\n        lastCall,\r\n        resizeDefer,\r\n\r\n    //cached container for 1em value, populated the first time it's needed\r\n        eminpx,\r\n\r\n    // returns the value of 1em in pixels\r\n        getEmValue = function() {\r\n            var ret,\r\n                div = doc.createElement('div'),\r\n                body = doc.body,\r\n                originalHTMLFontSize = docElem.style.fontSize,\r\n                originalBodyFontSize = body && body.style.fontSize,\r\n                fakeUsed = false;\r\n\r\n            div.style.cssText = \"position:absolute;font-size:1em;width:1em\";\r\n\r\n            if( !body ){\r\n                body = fakeUsed = doc.createElement( \"body\" );\r\n                body.style.background = \"none\";\r\n            }\r\n\r\n            // 1em in a media query is the value of the default font size of the browser\r\n            // reset docElem and body to ensure the correct value is returned\r\n            docElem.style.fontSize = \"100%\";\r\n            body.style.fontSize = \"100%\";\r\n\r\n            body.appendChild( div );\r\n\r\n            if( fakeUsed ){\r\n                docElem.insertBefore( body, docElem.firstChild );\r\n            }\r\n\r\n            ret = div.offsetWidth;\r\n\r\n            if( fakeUsed ){\r\n                docElem.removeChild( body );\r\n            }\r\n            else {\r\n                body.removeChild( div );\r\n            }\r\n\r\n            // restore the original values\r\n            docElem.style.fontSize = originalHTMLFontSize;\r\n            if( originalBodyFontSize ) {\r\n                body.style.fontSize = originalBodyFontSize;\r\n            }\r\n\r\n\r\n            //also update eminpx before returning\r\n            ret = eminpx = parseFloat(ret);\r\n\r\n            return ret;\r\n        },\r\n\r\n    //enable/disable styles\r\n        applyMedia = function( fromResize ){\r\n            var name = \"clientWidth\",\r\n                docElemProp = docElem[ name ],\r\n                currWidth = doc.compatMode === \"CSS1Compat\" && docElemProp || doc.body[ name ] || docElemProp,\r\n                styleBlocks\t= {},\r\n                lastLink = links[ links.length-1 ],\r\n                now = (new Date()).getTime();\r\n\r\n            //throttle resize calls\r\n            if( fromResize && lastCall && now - lastCall < resizeThrottle ){\r\n                w.clearTimeout( resizeDefer );\r\n                resizeDefer = w.setTimeout( applyMedia, resizeThrottle );\r\n                return;\r\n            }\r\n            else {\r\n                lastCall = now;\r\n            }\r\n\r\n            for( var i in mediastyles ){\r\n                if( mediastyles.hasOwnProperty( i ) ){\r\n                    var thisstyle = mediastyles[ i ],\r\n                        min = thisstyle.minw,\r\n                        max = thisstyle.maxw,\r\n                        minnull = min === null,\r\n                        maxnull = max === null,\r\n                        em = \"em\";\r\n\r\n                    if( !!min ){\r\n                        min = parseFloat( min ) * ( min.indexOf( em ) > -1 ? ( eminpx || getEmValue() ) : 1 );\r\n                    }\r\n                    if( !!max ){\r\n                        max = parseFloat( max ) * ( max.indexOf( em ) > -1 ? ( eminpx || getEmValue() ) : 1 );\r\n                    }\r\n\r\n                    // if there's no media query at all (the () part), or min or max is not null, and if either is present, they're true\r\n                    if( !thisstyle.hasquery || ( !minnull || !maxnull ) && ( minnull || currWidth >= min ) && ( maxnull || currWidth <= max ) ){\r\n                        if( !styleBlocks[ thisstyle.media ] ){\r\n                            styleBlocks[ thisstyle.media ] = [];\r\n                        }\r\n                        styleBlocks[ thisstyle.media ].push( rules[ thisstyle.rules ] );\r\n                    }\r\n                }\r\n            }\r\n\r\n            //remove any existing respond style element(s)\r\n            for( var j in appendedEls ){\r\n                if( appendedEls.hasOwnProperty( j ) ){\r\n                    if( appendedEls[ j ] && appendedEls[ j ].parentNode === head ){\r\n                        head.removeChild( appendedEls[ j ] );\r\n                    }\r\n                }\r\n            }\r\n            appendedEls.length = 0;\r\n\r\n            //inject active styles, grouped by media type\r\n            for( var k in styleBlocks ){\r\n                if( styleBlocks.hasOwnProperty( k ) ){\r\n                    var ss = doc.createElement( \"style\" ),\r\n                        css = styleBlocks[ k ].join( \"\\n\" );\r\n\r\n                    ss.type = \"text/css\";\r\n                    ss.media = k;\r\n\r\n                    //originally, ss was appended to a documentFragment and sheets were appended in bulk.\r\n                    //this caused crashes in IE in a number of circumstances, such as when the HTML element had a bg image set, so appending beforehand seems best. Thanks to @dvelyk for the initial research on this one!\r\n                    head.insertBefore( ss, lastLink.nextSibling );\r\n\r\n                    if ( ss.styleSheet ){\r\n                        ss.styleSheet.cssText = css;\r\n                    }\r\n                    else {\r\n                        ss.appendChild( doc.createTextNode( css ) );\r\n                    }\r\n\r\n                    //push to appendedEls to track for later removal\r\n                    appendedEls.push( ss );\r\n                }\r\n            }\r\n        },\r\n    //find media blocks in css text, convert to style blocks\r\n        translate = function( styles, href, media ){\r\n            var qs = styles.replace( respond.regex.comments, '' )\r\n                    .replace( respond.regex.keyframes, '' )\r\n                    .match( respond.regex.media ),\r\n                ql = qs && qs.length || 0;\r\n\r\n            //try to get CSS path\r\n            href = href.substring( 0, href.lastIndexOf( \"/\" ) );\r\n\r\n            var repUrls = function( css ){\r\n                    return css.replace( respond.regex.urls, \"$1\" + href + \"$2$3\" );\r\n                },\r\n                useMedia = !ql && media;\r\n\r\n            //if path exists, tack on trailing slash\r\n            if( href.length ){ href += \"/\"; }\r\n\r\n            //if no internal queries exist, but media attr does, use that\r\n            //note: this currently lacks support for situations where a media attr is specified on a link AND\r\n            //its associated stylesheet has internal CSS media queries.\r\n            //In those cases, the media attribute will currently be ignored.\r\n            if( useMedia ){\r\n                ql = 1;\r\n            }\r\n\r\n            for( var i = 0; i < ql; i++ ){\r\n                var fullq, thisq, eachq, eql;\r\n\r\n                //media attr\r\n                if( useMedia ){\r\n                    fullq = media;\r\n                    rules.push( repUrls( styles ) );\r\n                }\r\n                //parse for styles\r\n                else{\r\n                    fullq = qs[ i ].match( respond.regex.findStyles ) && RegExp.$1;\r\n                    rules.push( RegExp.$2 && repUrls( RegExp.$2 ) );\r\n                }\r\n\r\n                eachq = fullq.split( \",\" );\r\n                eql = eachq.length;\r\n\r\n                for( var j = 0; j < eql; j++ ){\r\n                    thisq = eachq[ j ];\r\n\r\n                    if( isUnsupportedMediaQuery( thisq ) ) {\r\n                        continue;\r\n                    }\r\n\r\n                    mediastyles.push( {\r\n                        media : thisq.split( \"(\" )[ 0 ].match( respond.regex.only ) && RegExp.$2 || \"all\",\r\n                        rules : rules.length - 1,\r\n                        hasquery : thisq.indexOf(\"(\") > -1,\r\n                        minw : thisq.match( respond.regex.minw ) && parseFloat( RegExp.$1 ) + ( RegExp.$2 || \"\" ),\r\n                        maxw : thisq.match( respond.regex.maxw ) && parseFloat( RegExp.$1 ) + ( RegExp.$2 || \"\" )\r\n                    } );\r\n                }\r\n            }\r\n\r\n            applyMedia();\r\n        },\r\n\r\n    //recurse through request queue, get css text\r\n        makeRequests = function(){\r\n            if( requestQueue.length ){\r\n                var thisRequest = requestQueue.shift();\r\n\r\n                ajax( thisRequest.href, function( styles ){\r\n                    translate( styles, thisRequest.href, thisRequest.media );\r\n                    parsedSheets[ thisRequest.href ] = true;\r\n\r\n                    // by wrapping recursive function call in setTimeout\r\n                    // we prevent \"Stack overflow\" error in IE7\r\n                    w.setTimeout(function(){ makeRequests(); },0);\r\n                } );\r\n            }\r\n        },\r\n\r\n    //loop stylesheets, send text content to translate\r\n        ripCSS = function(){\r\n\r\n            for( var i = 0; i < links.length; i++ ){\r\n                var sheet = links[ i ],\r\n                    href = sheet.href,\r\n                    media = sheet.media,\r\n                    isCSS = sheet.rel && sheet.rel.toLowerCase() === \"stylesheet\";\r\n\r\n                //only links plz and prevent re-parsing\r\n                if( !!href && isCSS && !parsedSheets[ href ] ){\r\n                    // selectivizr exposes css through the rawCssText expando\r\n                    if (sheet.styleSheet && sheet.styleSheet.rawCssText) {\r\n                        translate( sheet.styleSheet.rawCssText, href, media );\r\n                        parsedSheets[ href ] = true;\r\n                    } else {\r\n                        if( (!/^([a-zA-Z:]*\\/\\/)/.test( href ) && !base) ||\r\n                            href.replace( RegExp.$1, \"\" ).split( \"/\" )[0] === w.location.host ){\r\n                            // IE7 doesn't handle urls that start with '//' for ajax request\r\n                            // manually add in the protocol\r\n                            if ( href.substring(0,2) === \"//\" ) { href = w.location.protocol + href; }\r\n                            requestQueue.push( {\r\n                                href: href,\r\n                                media: media\r\n                            } );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            makeRequests();\r\n        };\r\n\r\n    //translate CSS\r\n    ripCSS();\r\n\r\n    //expose update for re-running respond later on\r\n    respond.update = ripCSS;\r\n\r\n    //expose getEmValue\r\n    respond.getEmValue = getEmValue;\r\n\r\n    //adjust on resize\r\n    function callMedia(){\r\n        applyMedia( true );\r\n    }\r\n\r\n    if( w.addEventListener ){\r\n        w.addEventListener( \"resize\", callMedia, false );\r\n    }\r\n    else if( w.attachEvent ){\r\n        w.attachEvent( \"onresize\", callMedia );\r\n    }\r\n})(this);\r\n"],"sourceRoot":"/source/"}